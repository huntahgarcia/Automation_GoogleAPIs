#pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib


import os
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from google.oauth2.credentials import Credentials
from google.auth.transport.requests import Request


def create_service(client_secret_file, api_name, api_version, *scopes, prefix=''):
    CLIENT_SECRET_FILE = client_secret_file
    API_SERVICE_NAME = api_name
    API_VERSION = api_version
    SCOPES = list(scopes)


    creds = None
    working_dir = os.getcwd()
    token_dir = 'token files'
    token_file = f'token_{API_SERVICE_NAME}_{API_VERSION}{prefix}.json'
    token_path = os.path.join(working_dir, token_dir, token_file)


    # Ensure token directory exists
    os.makedirs(os.path.join(working_dir, token_dir), exist_ok=True)


    # Load existing token
    if os.path.exists(token_path):
        creds = Credentials.from_authorized_user_file(token_path, SCOPES)


    # If no valid creds, perform OAuth flow
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else: 
            flow = InstalledAppFlow.from_client_secrets_file(CLIENT_SECRET_FILE, SCOPES)
            creds = flow.run_local_server(port=0)


        # Save the credentials
        with open(token_path, 'w') as token:
            token.write(creds.to_json())


    try: 
        service = build(API_SERVICE_NAME, API_VERSION, credentials=creds, static_discovery=False)
        print(API_SERVICE_NAME, API_VERSION, 'service created successfully')
        return service
    except Exception as e: 
        print(e)
        print(f'Failed to create service instance for {API_SERVICE_NAME}')
        if os.path.exists(token_path):
            os.remove(token_path)
        return None
